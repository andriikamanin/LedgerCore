{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nexport default {\n  data() {\n    return {\n      transactions: [] // Здесь будут храниться данные о транзакциях\n    };\n  },\n  methods: {\n    fetchBlockchainData() {\n      fetch('http://localhost:8080/api/chain').then(response => response.text()).then(data => {\n        this.transactions = this.parseBlockchainData(data);\n      }).catch(error => {\n        console.error('Error fetching blockchain data:', error);\n      });\n    },\n    parseBlockchainData(data) {\n      const transactions = [];\n      const blocks = data.split(\"Цепочка блоков:\")[1].split(\"Block\").slice(1);\n      blocks.forEach(block => {\n        const blockNumber = block.match(/index=(\\d+)/)?.[1];\n        const transactionsList = block.match(/Transaction\\{(.+?)\\}/g);\n        if (transactionsList) {\n          transactionsList.forEach(tx => {\n            const sender = tx.match(/sender='(.+?)'/)?.[1];\n            const receiver = tx.match(/receiver='(.+?)'/)?.[1];\n            const amount = tx.match(/amount=(\\d+(\\.\\d+)?)/)?.[1];\n            const hash = block.match(/hash='(.+?)'/)?.[1];\n            const age = new Date().toLocaleTimeString(); // Пример для возраста\n\n            transactions.push({\n              hash,\n              blockNumber,\n              age,\n              sender,\n              receiver,\n              amount,\n              currency: \"USD\" // Валюта по умолчанию\n            });\n          });\n        }\n      });\n      return transactions;\n    }\n  },\n  mounted() {\n    this.fetchBlockchainData();\n    setInterval(this.fetchBlockchainData, 5000); // Обновление каждые 5 секунд\n  }\n};","map":{"version":3,"names":["data","transactions","methods","fetchBlockchainData","fetch","then","response","text","parseBlockchainData","catch","error","console","blocks","split","slice","forEach","block","blockNumber","match","transactionsList","tx","sender","receiver","amount","hash","age","Date","toLocaleTimeString","push","currency","mounted","setInterval"],"sources":["/Users/andrejkamanin/Documents/LedgerCore/blockchain-frontend/src/components/BlockchainTable.vue"],"sourcesContent":["<template>\n  <div class=\"blockchain-table\">\n    <h2>Blockchain Transactions</h2>\n    <table>\n      <thead>\n        <tr>\n          <th>Hash</th>\n          <th>Block Number</th>\n          <th>Age</th>\n          <th>Sender</th>\n          <th>Receiver</th>\n          <th>Amount</th>\n          <th>Currency</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"(transaction, index) in transactions\" :key=\"index\">\n          <td>{{ transaction.hash }}</td>\n          <td>{{ transaction.blockNumber }}</td>\n          <td>{{ transaction.age }}</td>\n          <td>{{ transaction.sender }}</td>\n          <td>{{ transaction.receiver }}</td>\n          <td>{{ transaction.amount }}</td>\n          <td>{{ transaction.currency }}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      transactions: [] // Здесь будут храниться данные о транзакциях\n    };\n  },\n  methods: {\n    fetchBlockchainData() {\n      fetch('http://localhost:8080/api/chain')\n        .then(response => response.text())\n        .then(data => {\n          this.transactions = this.parseBlockchainData(data);\n        })\n        .catch(error => {\n          console.error('Error fetching blockchain data:', error);\n        });\n    },\n    parseBlockchainData(data) {\n      const transactions = [];\n      const blocks = data.split(\"Цепочка блоков:\")[1].split(\"Block\").slice(1);\n\n      blocks.forEach(block => {\n        const blockNumber = block.match(/index=(\\d+)/)?.[1];\n        const transactionsList = block.match(/Transaction\\{(.+?)\\}/g);\n\n        if (transactionsList) {\n          transactionsList.forEach(tx => {\n            const sender = tx.match(/sender='(.+?)'/)?.[1];\n            const receiver = tx.match(/receiver='(.+?)'/)?.[1];\n            const amount = tx.match(/amount=(\\d+(\\.\\d+)?)/)?.[1];\n            const hash = block.match(/hash='(.+?)'/)?.[1];\n            const age = new Date().toLocaleTimeString(); // Пример для возраста\n\n            transactions.push({\n              hash,\n              blockNumber,\n              age,\n              sender,\n              receiver,\n              amount,\n              currency: \"USD\" // Валюта по умолчанию\n            });\n          });\n        }\n      });\n\n      return transactions;\n    }\n  },\n  mounted() {\n    this.fetchBlockchainData();\n    setInterval(this.fetchBlockchainData, 5000); // Обновление каждые 5 секунд\n  }\n};\n</script>\n\n<style>\n.blockchain-table {\n  margin-top: 20px;\n  text-align: center;\n}\ntable {\n  width: 100%;\n  border-collapse: collapse;\n}\nth, td {\n  border: 1px solid #ddd;\n  padding: 8px;\n  text-align: center;\n}\nth {\n  background-color: #f4f4f4;\n}\n</style>\n"],"mappings":";;;AA+BA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,YAAY,EAAE,EAAC,CAAE;IACnB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,mBAAmBA,CAAA,EAAG;MACpBC,KAAK,CAAC,iCAAiC,EACpCC,IAAI,CAACC,QAAO,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,EAChCF,IAAI,CAACL,IAAG,IAAK;QACZ,IAAI,CAACC,YAAW,GAAI,IAAI,CAACO,mBAAmB,CAACR,IAAI,CAAC;MACpD,CAAC,EACAS,KAAK,CAACC,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACzD,CAAC,CAAC;IACN,CAAC;IACDF,mBAAmBA,CAACR,IAAI,EAAE;MACxB,MAAMC,YAAW,GAAI,EAAE;MACvB,MAAMW,MAAK,GAAIZ,IAAI,CAACa,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,OAAO,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC;MAEvEF,MAAM,CAACG,OAAO,CAACC,KAAI,IAAK;QACtB,MAAMC,WAAU,GAAID,KAAK,CAACE,KAAK,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QACnD,MAAMC,gBAAe,GAAIH,KAAK,CAACE,KAAK,CAAC,uBAAuB,CAAC;QAE7D,IAAIC,gBAAgB,EAAE;UACpBA,gBAAgB,CAACJ,OAAO,CAACK,EAAC,IAAK;YAC7B,MAAMC,MAAK,GAAID,EAAE,CAACF,KAAK,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC;YAC9C,MAAMI,QAAO,GAAIF,EAAE,CAACF,KAAK,CAAC,kBAAkB,CAAC,GAAG,CAAC,CAAC;YAClD,MAAMK,MAAK,GAAIH,EAAE,CAACF,KAAK,CAAC,sBAAsB,CAAC,GAAG,CAAC,CAAC;YACpD,MAAMM,IAAG,GAAIR,KAAK,CAACE,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC;YAC7C,MAAMO,GAAE,GAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC,EAAE;;YAE7C1B,YAAY,CAAC2B,IAAI,CAAC;cAChBJ,IAAI;cACJP,WAAW;cACXQ,GAAG;cACHJ,MAAM;cACNC,QAAQ;cACRC,MAAM;cACNM,QAAQ,EAAE,KAAI,CAAE;YAClB,CAAC,CAAC;UACJ,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;MAEF,OAAO5B,YAAY;IACrB;EACF,CAAC;EACD6B,OAAOA,CAAA,EAAG;IACR,IAAI,CAAC3B,mBAAmB,CAAC,CAAC;IAC1B4B,WAAW,CAAC,IAAI,CAAC5B,mBAAmB,EAAE,IAAI,CAAC,EAAE;EAC/C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}