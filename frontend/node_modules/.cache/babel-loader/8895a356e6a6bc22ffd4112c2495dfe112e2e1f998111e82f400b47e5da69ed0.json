{"ast":null,"code":"export default {\n  data() {\n    return {\n      blockchain: null\n    };\n  },\n  computed: {\n    formattedBlockchain() {\n      if (this.blockchain) {\n        // Форматируем данные перед выводом, например, разделяем строки по блокам\n        return this.blockchain.replace(/Block/g, \"\\n\\nBlock\") // Разбиваем по блокам для лучшей читаемости\n        .replace(/\\{index/g, \"\\n{index\") // Новая строка перед каждой новой записью\n        .replace(/Transaction/g, \"\\nTransaction\"); // Разделяем транзакции для удобства\n      }\n      return '';\n    }\n  },\n  mounted() {\n    this.fetchBlockchain();\n    setInterval(this.fetchBlockchain, 30000); // Запрос каждые 5 секунд\n  },\n  methods: {\n    fetchBlockchain() {\n      fetch('http://localhost:8080/api/chain').then(response => response.text()) // Получаем текст\n      .then(data => {\n        this.blockchain = data; // Обновляем данные как строку\n      }).catch(error => {\n        console.error('Error fetching blockchain:', error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["data","blockchain","computed","formattedBlockchain","replace","mounted","fetchBlockchain","setInterval","methods","fetch","then","response","text","catch","error","console"],"sources":["/Users/andrejkamanin/Documents/blockchain-frontend/src/components/ShowBlockchain.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Blockchain Data</h2>\n    <pre>{{ formattedBlockchain }}</pre> <!-- отображаем отформатированные данные -->\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      blockchain: null\n    };\n  },\n  computed: {\n    formattedBlockchain() {\n      if (this.blockchain) {\n        // Форматируем данные перед выводом, например, разделяем строки по блокам\n        return this.blockchain\n          .replace(/Block/g, \"\\n\\nBlock\")  // Разбиваем по блокам для лучшей читаемости\n          .replace(/\\{index/g, \"\\n{index\") // Новая строка перед каждой новой записью\n          .replace(/Transaction/g, \"\\nTransaction\"); // Разделяем транзакции для удобства\n      }\n      return '';\n    }\n  },\n  mounted() {\n    this.fetchBlockchain();\n    setInterval(this.fetchBlockchain, 30000); // Запрос каждые 5 секунд\n  },\n  methods: {\n    fetchBlockchain() {\n      fetch('http://localhost:8080/api/chain')\n        .then(response => response.text())  // Получаем текст\n        .then(data => {\n          this.blockchain = data;  // Обновляем данные как строку\n        })\n        .catch(error => {\n          console.error('Error fetching blockchain:', error);\n        });\n    }\n  }\n};\n</script>\n\n<style scoped>\nh2 {\n  color: #2c3e50;\n}\npre {\n  text-align: left;\n  background-color: #f4f4f4;\n  padding: 20px;\n  border-radius: 8px;\n  white-space: pre-wrap;\n  word-wrap: break-word;\n  font-family: 'Courier New', Courier, monospace;\n}\n</style>\n"],"mappings":"AAQA,eAAe;EACbA,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,UAAU,EAAE;IACd,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACRC,mBAAmBA,CAAA,EAAG;MACpB,IAAI,IAAI,CAACF,UAAU,EAAE;QACnB;QACA,OAAO,IAAI,CAACA,UAAS,CAClBG,OAAO,CAAC,QAAQ,EAAE,WAAW,EAAG;QAAA,CAChCA,OAAO,CAAC,UAAU,EAAE,UAAU,EAAE;QAAA,CAChCA,OAAO,CAAC,cAAc,EAAE,eAAe,CAAC,EAAE;MAC/C;MACA,OAAO,EAAE;IACX;EACF,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACC,eAAe,CAAC,CAAC;IACtBC,WAAW,CAAC,IAAI,CAACD,eAAe,EAAE,KAAK,CAAC,EAAE;EAC5C,CAAC;EACDE,OAAO,EAAE;IACPF,eAAeA,CAAA,EAAG;MAChBG,KAAK,CAAC,iCAAiC,EACpCC,IAAI,CAACC,QAAO,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,EAAG;MAAA,CACnCF,IAAI,CAACV,IAAG,IAAK;QACZ,IAAI,CAACC,UAAS,GAAID,IAAI,EAAG;MAC3B,CAAC,EACAa,KAAK,CAACC,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD,CAAC,CAAC;IACN;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}