{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Deposit = _resolveComponent(\"Deposit\");\n  const _component_TransactionTable = _resolveComponent(\"TransactionTable\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [!$data.isLoggedIn ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_cache[2] || (_cache[2] = _createElementVNode(\"h2\", null, \"Введите ваше имя для входа\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.username = $event),\n    placeholder: \"Ваше имя\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.username]]), _createElementVNode(\"button\", {\n    onClick: _cache[1] || (_cache[1] = (...args) => $options.login && $options.login(...args))\n  }, \"Войти\")])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"h1\", null, \"Добро пожаловать, \" + _toDisplayString($data.username), 1 /* TEXT */), _createVNode(_component_Deposit, {\n    username: $data.username,\n    onTransactionAdded: $options.updateTransactions\n  }, null, 8 /* PROPS */, [\"username\", \"onTransactionAdded\"]), _createVNode(_component_TransactionTable, {\n    transactions: $data.transactions\n  }, null, 8 /* PROPS */, [\"transactions\"])]))]);\n}","map":{"version":3,"names":["id","key","_createElementBlock","_hoisted_1","$data","isLoggedIn","_hoisted_2","_createElementVNode","type","_cache","$event","username","placeholder","onClick","args","$options","login","_hoisted_3","_toDisplayString","_createVNode","_component_Deposit","onTransactionAdded","updateTransactions","_component_TransactionTable","transactions"],"sources":["/Users/andrejkamanin/Documents/LedgerCore/blockchain-frontend/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <div v-if=\"!isLoggedIn\">\n      <h2>Введите ваше имя для входа</h2>\n      <input type=\"text\" v-model=\"username\" placeholder=\"Ваше имя\" />\n      <button @click=\"login\">Войти</button>\n    </div>\n    <div v-else>\n      <h1>Добро пожаловать, {{ username }}</h1>\n      <Deposit :username=\"username\" @transaction-added=\"updateTransactions\" />\n      <TransactionTable :transactions=\"transactions\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport Deposit from './components/TransactionDeposit.vue';\nimport TransactionTable from './components/TransactionTable.vue';\n\nexport default {\n  data() {\n    return {\n      username: '', // Имя пользователя\n      isLoggedIn: false, // Состояние авторизации\n      transactions: [] // Хранение списка операций\n    };\n  },\n  components: {\n    Deposit,\n    TransactionTable\n  },\n  methods: {\n    login() {\n      if (this.username.trim() !== '') {\n        this.isLoggedIn = true; // Устанавливаем авторизацию\n        this.fetchTransactions(); // Загружаем текущие операции\n      } else {\n        alert('Введите корректное имя!');\n      }\n    },\n    fetchTransactions() {\n      fetch('http://localhost:8080/api/chain')\n        .then(response => response.json())\n        .then(data => {\n          // Здесь мы парсим блоки и операции для таблицы\n          this.transactions = this.parseBlockchain(data);\n        })\n        .catch(error => console.error('Ошибка при загрузке блокчейна:', error));\n    },\n    parseBlockchain(blockchainData) {\n      // Парсим цепочку блоков в операции\n      const operations = [];\n      blockchainData.split('Цепочка блоков:')[1]\n        .split('Block')\n        .slice(1)\n        .forEach(block => {\n          const lines = block.split('\\n');\n          const blockIndex = lines[0].match(/index=(\\d+)/)[1];\n          const transactions = block.match(/Transaction\\{sender='(.*?)', receiver='(.*?)', amount=(.*?)\\}/g) || [];\n          transactions.forEach(tx => {\n            const [, sender, receiver, amount] = tx.match(/Transaction\\{sender='(.*?)', receiver='(.*?)', amount=(.*?)\\}/);\n            operations.push({\n              hash: blockIndex, // Условно номер блока\n              sender,\n              receiver,\n              amount,\n              currency: 'USD' // Фиксируем валюту как доллар\n            });\n          });\n        });\n      return operations;\n    },\n    updateTransactions() {\n      this.fetchTransactions(); // Обновляем список операций\n    }\n  }\n};\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"],"mappings":";;EACOA,EAAE,EAAC;AAAK;;EADfC,GAAA;AAAA;;EAAAA,GAAA;AAAA;;;;uBACEC,mBAAA,CAWM,OAXNC,UAWM,G,CAVQC,KAAA,CAAAC,UAAU,I,cAAtBH,mBAAA,CAIM,OANVI,UAAA,G,0BAGMC,mBAAA,CAAmC,YAA/B,4BAA0B,sB,gBAC9BA,mBAAA,CAA+D;IAAxDC,IAAI,EAAC,MAAM;IAJxB,uBAAAC,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAIkCN,KAAA,CAAAO,QAAQ,GAAAD,MAAA;IAAEE,WAAW,EAAC;iDAAtBR,KAAA,CAAAO,QAAQ,E,GACpCJ,mBAAA,CAAqC;IAA5BM,OAAK,EAAAJ,MAAA,QAAAA,MAAA,UAAAK,IAAA,KAAEC,QAAA,CAAAC,KAAA,IAAAD,QAAA,CAAAC,KAAA,IAAAF,IAAA,CAAK;KAAE,OAAK,E,oBAE9BZ,mBAAA,CAIM,OAXVe,UAAA,GAQMV,mBAAA,CAAyC,YAArC,oBAAkB,GAAAW,gBAAA,CAAGd,KAAA,CAAAO,QAAQ,kBACjCQ,YAAA,CAAwEC,kBAAA;IAA9DT,QAAQ,EAAEP,KAAA,CAAAO,QAAQ;IAAGU,kBAAiB,EAAEN,QAAA,CAAAO;+DAClDH,YAAA,CAAiDI,2BAAA;IAA9BC,YAAY,EAAEpB,KAAA,CAAAoB;EAAY,0C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}