{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"blockchain-table\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_cache[1] || (_cache[1] = _createElementVNode(\"h2\", null, \"Blockchain Transactions\", -1 /* HOISTED */)), _createElementVNode(\"table\", null, [_cache[0] || (_cache[0] = _createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [_createElementVNode(\"th\", null, \"Hash\"), _createElementVNode(\"th\", null, \"Block Number\"), _createElementVNode(\"th\", null, \"Age\"), _createElementVNode(\"th\", null, \"Sender\"), _createElementVNode(\"th\", null, \"Receiver\"), _createElementVNode(\"th\", null, \"Amount\"), _createElementVNode(\"th\", null, \"Currency\")])], -1 /* HOISTED */)), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.transactions, (transaction, index) => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: index\n    }, [_createElementVNode(\"td\", null, _toDisplayString(transaction.hash), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(transaction.blockNumber), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(transaction.age), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(transaction.sender), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(transaction.receiver), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(transaction.amount), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(transaction.currency), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_Fragment","_renderList","$data","transactions","transaction","index","key","_toDisplayString","hash","blockNumber","age","sender","receiver","amount","currency"],"sources":["/Users/andrejkamanin/Documents/LedgerCore/blockchain-frontend/src/components/BlockchainTable.vue"],"sourcesContent":["<template>\n  <div class=\"blockchain-table\">\n    <h2>Blockchain Transactions</h2>\n    <table>\n      <thead>\n        <tr>\n          <th>Hash</th>\n          <th>Block Number</th>\n          <th>Age</th>\n          <th>Sender</th>\n          <th>Receiver</th>\n          <th>Amount</th>\n          <th>Currency</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr v-for=\"(transaction, index) in transactions\" :key=\"index\">\n          <td>{{ transaction.hash }}</td>\n          <td>{{ transaction.blockNumber }}</td>\n          <td>{{ transaction.age }}</td>\n          <td>{{ transaction.sender }}</td>\n          <td>{{ transaction.receiver }}</td>\n          <td>{{ transaction.amount }}</td>\n          <td>{{ transaction.currency }}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      transactions: [] // Здесь будут храниться данные о транзакциях\n    };\n  },\n  methods: {\n    fetchBlockchainData() {\n      fetch('http://localhost:8080/api/chain')\n        .then(response => response.text())\n        .then(data => {\n          this.transactions = this.parseBlockchainData(data);\n        })\n        .catch(error => {\n          console.error('Error fetching blockchain data:', error);\n        });\n    },\n    parseBlockchainData(data) {\n      const transactions = [];\n      const blocks = data.split(\"Цепочка блоков:\")[1].split(\"Block\").slice(1);\n\n      blocks.forEach(block => {\n        const blockNumber = block.match(/index=(\\d+)/)?.[1];\n        const transactionsList = block.match(/Transaction\\{(.+?)\\}/g);\n\n        if (transactionsList) {\n          transactionsList.forEach(tx => {\n            const sender = tx.match(/sender='(.+?)'/)?.[1];\n            const receiver = tx.match(/receiver='(.+?)'/)?.[1];\n            const amount = tx.match(/amount=(\\d+(\\.\\d+)?)/)?.[1];\n            const hash = block.match(/hash='(.+?)'/)?.[1];\n            const age = new Date().toLocaleTimeString(); // Пример для возраста\n\n            transactions.push({\n              hash,\n              blockNumber,\n              age,\n              sender,\n              receiver,\n              amount,\n              currency: \"USD\" // Валюта по умолчанию\n            });\n          });\n        }\n      });\n\n      return transactions;\n    }\n  },\n  mounted() {\n    this.fetchBlockchainData();\n    setInterval(this.fetchBlockchainData, 5000); // Обновление каждые 5 секунд\n  }\n};\n</script>\n\n<style>\n.blockchain-table {\n  margin-top: 20px;\n  text-align: center;\n}\ntable {\n  width: 100%;\n  border-collapse: collapse;\n}\nth, td {\n  border: 1px solid #ddd;\n  padding: 8px;\n  text-align: center;\n}\nth {\n  background-color: #f4f4f4;\n}\n</style>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAkB;;uBAA7BC,mBAAA,CA0BM,OA1BNC,UA0BM,G,0BAzBJC,mBAAA,CAAgC,YAA5B,yBAAuB,sBAC3BA,mBAAA,CAuBQ,gB,0BAtBNA,mBAAA,CAUQ,gBATNA,mBAAA,CAQK,aAPHA,mBAAA,CAAa,YAAT,MAAI,GACRA,mBAAA,CAAqB,YAAjB,cAAY,GAChBA,mBAAA,CAAY,YAAR,KAAG,GACPA,mBAAA,CAAe,YAAX,QAAM,GACVA,mBAAA,CAAiB,YAAb,UAAQ,GACZA,mBAAA,CAAe,YAAX,QAAM,GACVA,mBAAA,CAAiB,YAAb,UAAQ,E,wBAGhBA,mBAAA,CAUQ,iB,kBATNF,mBAAA,CAQKG,SAAA,QAxBbC,WAAA,CAgB2CC,KAAA,CAAAC,YAAY,EAhBvD,CAgBoBC,WAAW,EAAEC,KAAK;yBAA9BR,mBAAA,CAQK;MAR6CS,GAAG,EAAED;IAAK,IAC1DN,mBAAA,CAA+B,YAAAQ,gBAAA,CAAxBH,WAAW,CAACI,IAAI,kBACvBT,mBAAA,CAAsC,YAAAQ,gBAAA,CAA/BH,WAAW,CAACK,WAAW,kBAC9BV,mBAAA,CAA8B,YAAAQ,gBAAA,CAAvBH,WAAW,CAACM,GAAG,kBACtBX,mBAAA,CAAiC,YAAAQ,gBAAA,CAA1BH,WAAW,CAACO,MAAM,kBACzBZ,mBAAA,CAAmC,YAAAQ,gBAAA,CAA5BH,WAAW,CAACQ,QAAQ,kBAC3Bb,mBAAA,CAAiC,YAAAQ,gBAAA,CAA1BH,WAAW,CAACS,MAAM,kBACzBd,mBAAA,CAAmC,YAAAQ,gBAAA,CAA5BH,WAAW,CAACU,QAAQ,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}