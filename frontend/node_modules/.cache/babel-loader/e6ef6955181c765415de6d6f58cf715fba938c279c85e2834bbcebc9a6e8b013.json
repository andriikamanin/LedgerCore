{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport Deposit from './components/TransactionDeposit.vue';\nimport TransactionTable from './components/BlockchainTable.vue';\nexport default {\n  data() {\n    return {\n      username: '',\n      // Имя пользователя\n      isLoggedIn: false,\n      // Состояние авторизации\n      transactions: [] // Хранение списка операций\n    };\n  },\n  components: {\n    Deposit,\n    TransactionTable\n  },\n  methods: {\n    login() {\n      if (this.username.trim() !== '') {\n        this.isLoggedIn = true; // Устанавливаем авторизацию\n        this.fetchTransactions(); // Загружаем текущие операции\n      } else {\n        alert('Введите корректное имя!');\n      }\n    },\n    fetchTransactions() {\n      fetch('http://localhost:8080/api/chain').then(response => response.json()).then(data => {\n        // Здесь мы парсим блоки и операции для таблицы\n        this.transactions = this.parseBlockchain(data);\n      }).catch(error => console.error('Ошибка при загрузке блокчейна:', error));\n    },\n    parseBlockchain(blockchainData) {\n      // Парсим цепочку блоков в операции\n      const operations = [];\n      blockchainData.split('Цепочка блоков:')[1].split('Block').slice(1).forEach(block => {\n        const lines = block.split('\\n');\n        const blockIndex = lines[0].match(/index=(\\d+)/)[1];\n        const transactions = block.match(/Transaction\\{sender='(.*?)', receiver='(.*?)', amount=(.*?)\\}/g) || [];\n        transactions.forEach(tx => {\n          const [, sender, receiver, amount] = tx.match(/Transaction\\{sender='(.*?)', receiver='(.*?)', amount=(.*?)\\}/);\n          operations.push({\n            hash: blockIndex,\n            // Условно номер блока\n            sender,\n            receiver,\n            amount,\n            currency: 'USD' // Фиксируем валюту как доллар\n          });\n        });\n      });\n      return operations;\n    },\n    updateTransactions() {\n      this.fetchTransactions(); // Обновляем список операций\n    }\n  }\n};","map":{"version":3,"names":["Deposit","TransactionTable","data","username","isLoggedIn","transactions","components","methods","login","trim","fetchTransactions","alert","fetch","then","response","json","parseBlockchain","catch","error","console","blockchainData","operations","split","slice","forEach","block","lines","blockIndex","match","tx","sender","receiver","amount","push","hash","currency","updateTransactions"],"sources":["/Users/andrejkamanin/Documents/LedgerCore/blockchain-frontend/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <div v-if=\"!isLoggedIn\">\n      <h2>Введите ваше имя для входа</h2>\n      <input type=\"text\" v-model=\"username\" placeholder=\"Ваше имя\" />\n      <button @click=\"login\">Войти</button>\n    </div>\n    <div v-else>\n      <h1>Добро пожаловать, {{ username }}</h1>\n      <Deposit :username=\"username\" @transaction-added=\"updateTransactions\" />\n      <TransactionTable :transactions=\"transactions\" />\n    </div>\n  </div>\n</template>\n\n<script>\nimport Deposit from './components/TransactionDeposit.vue';\nimport TransactionTable from './components/BlockchainTable.vue';\n\nexport default {\n  data() {\n    return {\n      username: '', // Имя пользователя\n      isLoggedIn: false, // Состояние авторизации\n      transactions: [] // Хранение списка операций\n    };\n  },\n  components: {\n    Deposit,\n    TransactionTable\n  },\n  methods: {\n    login() {\n      if (this.username.trim() !== '') {\n        this.isLoggedIn = true; // Устанавливаем авторизацию\n        this.fetchTransactions(); // Загружаем текущие операции\n      } else {\n        alert('Введите корректное имя!');\n      }\n    },\n    fetchTransactions() {\n      fetch('http://localhost:8080/api/chain')\n        .then(response => response.json())\n        .then(data => {\n          // Здесь мы парсим блоки и операции для таблицы\n          this.transactions = this.parseBlockchain(data);\n        })\n        .catch(error => console.error('Ошибка при загрузке блокчейна:', error));\n    },\n    parseBlockchain(blockchainData) {\n      // Парсим цепочку блоков в операции\n      const operations = [];\n      blockchainData.split('Цепочка блоков:')[1]\n        .split('Block')\n        .slice(1)\n        .forEach(block => {\n          const lines = block.split('\\n');\n          const blockIndex = lines[0].match(/index=(\\d+)/)[1];\n          const transactions = block.match(/Transaction\\{sender='(.*?)', receiver='(.*?)', amount=(.*?)\\}/g) || [];\n          transactions.forEach(tx => {\n            const [, sender, receiver, amount] = tx.match(/Transaction\\{sender='(.*?)', receiver='(.*?)', amount=(.*?)\\}/);\n            operations.push({\n              hash: blockIndex, // Условно номер блока\n              sender,\n              receiver,\n              amount,\n              currency: 'USD' // Фиксируем валюту как доллар\n            });\n          });\n        });\n      return operations;\n    },\n    updateTransactions() {\n      this.fetchTransactions(); // Обновляем список операций\n    }\n  }\n};\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n"],"mappings":";;;AAgBA,OAAOA,OAAM,MAAO,qCAAqC;AACzD,OAAOC,gBAAe,MAAO,kCAAkC;AAE/D,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MAAE;MACdC,UAAU,EAAE,KAAK;MAAE;MACnBC,YAAY,EAAE,EAAC,CAAE;IACnB,CAAC;EACH,CAAC;EACDC,UAAU,EAAE;IACVN,OAAO;IACPC;EACF,CAAC;EACDM,OAAO,EAAE;IACPC,KAAKA,CAAA,EAAG;MACN,IAAI,IAAI,CAACL,QAAQ,CAACM,IAAI,CAAC,MAAM,EAAE,EAAE;QAC/B,IAAI,CAACL,UAAS,GAAI,IAAI,EAAE;QACxB,IAAI,CAACM,iBAAiB,CAAC,CAAC,EAAE;MAC5B,OAAO;QACLC,KAAK,CAAC,yBAAyB,CAAC;MAClC;IACF,CAAC;IACDD,iBAAiBA,CAAA,EAAG;MAClBE,KAAK,CAAC,iCAAiC,EACpCC,IAAI,CAACC,QAAO,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,EAChCF,IAAI,CAACX,IAAG,IAAK;QACZ;QACA,IAAI,CAACG,YAAW,GAAI,IAAI,CAACW,eAAe,CAACd,IAAI,CAAC;MAChD,CAAC,EACAe,KAAK,CAACC,KAAI,IAAKC,OAAO,CAACD,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC,CAAC;IAC3E,CAAC;IACDF,eAAeA,CAACI,cAAc,EAAE;MAC9B;MACA,MAAMC,UAAS,GAAI,EAAE;MACrBD,cAAc,CAACE,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,EACtCA,KAAK,CAAC,OAAO,EACbC,KAAK,CAAC,CAAC,EACPC,OAAO,CAACC,KAAI,IAAK;QAChB,MAAMC,KAAI,GAAID,KAAK,CAACH,KAAK,CAAC,IAAI,CAAC;QAC/B,MAAMK,UAAS,GAAID,KAAK,CAAC,CAAC,CAAC,CAACE,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACnD,MAAMvB,YAAW,GAAIoB,KAAK,CAACG,KAAK,CAAC,gEAAgE,KAAK,EAAE;QACxGvB,YAAY,CAACmB,OAAO,CAACK,EAAC,IAAK;UACzB,MAAM,GAAGC,MAAM,EAAEC,QAAQ,EAAEC,MAAM,IAAIH,EAAE,CAACD,KAAK,CAAC,+DAA+D,CAAC;UAC9GP,UAAU,CAACY,IAAI,CAAC;YACdC,IAAI,EAAEP,UAAU;YAAE;YAClBG,MAAM;YACNC,QAAQ;YACRC,MAAM;YACNG,QAAQ,EAAE,KAAI,CAAE;UAClB,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC,CAAC;MACJ,OAAOd,UAAU;IACnB,CAAC;IACDe,kBAAkBA,CAAA,EAAG;MACnB,IAAI,CAAC1B,iBAAiB,CAAC,CAAC,EAAE;IAC5B;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}