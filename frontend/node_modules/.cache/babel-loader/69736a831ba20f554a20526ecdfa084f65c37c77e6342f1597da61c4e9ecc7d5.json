{"ast":null,"code":"import { createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[6] || (_cache[6] = _createElementVNode(\"h2\", null, \"Отправка средств\", -1 /* HOISTED */)), _createElementVNode(\"form\", {\n    onSubmit: _cache[2] || (_cache[2] = _withModifiers((...args) => $options.sendTransaction && $options.sendTransaction(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", null, [_cache[3] || (_cache[3] = _createElementVNode(\"label\", {\n    for: \"receiver\"\n  }, \"Получатель:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    id: \"receiver\",\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.receiver = $event),\n    placeholder: \"Получатель\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.receiver]])]), _createElementVNode(\"div\", null, [_cache[4] || (_cache[4] = _createElementVNode(\"label\", {\n    for: \"amount\"\n  }, \"Сумма:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    id: \"amount\",\n    type: \"number\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.amount = $event),\n    placeholder: \"Сумма\",\n    required: \"\",\n    min: \"0.01\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.amount]])]), _cache[5] || (_cache[5] = _createElementVNode(\"button\", {\n    type: \"submit\"\n  }, \"Отправить\", -1 /* HOISTED */))], 32 /* NEED_HYDRATION */), $data.balance !== null ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"p\", null, \"Ваш баланс: \" + _toDisplayString($data.balance) + \" USD\", 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true), $data.transactionStatus !== null ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"p\", {\n    class: _normalizeClass($data.transactionStatus.success ? 'success' : 'error')\n  }, _toDisplayString($data.transactionStatus.message), 3 /* TEXT, CLASS */)])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["key","_createElementBlock","_createElementVNode","onSubmit","_cache","_withModifiers","args","$options","sendTransaction","for","id","type","$event","$data","receiver","placeholder","required","amount","min","balance","_hoisted_1","_toDisplayString","_createCommentVNode","transactionStatus","_hoisted_2","class","_normalizeClass","success","message"],"sources":["/Users/andrejkamanin/Documents/LedgerCore/blockchain-frontend/src/components/TransactionDeposit.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Отправка средств</h2>\n    <form @submit.prevent=\"sendTransaction\">\n      <div>\n        <label for=\"receiver\">Получатель:</label>\n        <input \n          id=\"receiver\" \n          type=\"text\" \n          v-model=\"receiver\" \n          placeholder=\"Получатель\" \n          required \n        />\n      </div>\n      <div>\n        <label for=\"amount\">Сумма:</label>\n        <input \n          id=\"amount\" \n          type=\"number\" \n          v-model=\"amount\" \n          placeholder=\"Сумма\" \n          required \n          min=\"0.01\" \n        />\n      </div>\n      <button type=\"submit\">Отправить</button>\n    </form>\n\n    <div v-if=\"balance !== null\">\n      <p>Ваш баланс: {{ balance }} USD</p>\n    </div>\n\n    <div v-if=\"transactionStatus !== null\">\n      <p :class=\"transactionStatus.success ? 'success' : 'error'\">\n        {{ transactionStatus.message }}\n      </p>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: ['username'],\n  data() {\n    return {\n      receiver: '',\n      amount: 0,\n      balance: null, // баланс пользователя\n      transactionStatus: null // состояние транзакции\n    };\n  },\n  created() {\n    if (this.username) {\n      this.fetchBalance();\n    }\n  },\n  methods: {\n    // Получаем баланс пользователя\n    fetchBalance() {\n      fetch(`http://localhost:8080/api/balance?username=${this.username}`)\n        .then(response => {\n          if (!response.ok) {\n            throw new Error('Не удалось получить баланс');\n          }\n          return response.json();\n        })\n        .then(data => {\n          if (data && data.balance !== undefined) {\n            this.balance = data.balance;\n          } else {\n            throw new Error('Некорректные данные баланса');\n          }\n        })\n        .catch(error => {\n          console.error('Ошибка при получении баланса:', error);\n          this.transactionStatus = {\n            success: false,\n            message: 'Ошибка при получении баланса.'\n          };\n        });\n    },\n\n    // Отправка транзакции\n    sendTransaction() {\n      if (!this.username) {\n        alert('Сначала войдите, указав имя пользователя!');\n        return;\n      }\n\n      if (this.amount <= 0) {\n        alert('Сумма должна быть больше нуля!');\n        return;\n      }\n\n      fetch('http://localhost:8080/api/transaction', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          sender: this.username,\n          receiver: this.receiver,\n          amount: this.amount\n        })\n      })\n        .then(response => {\n          if (!response.ok) {\n            throw new Error('Ошибка при отправке транзакции');\n          }\n          return response.text();\n        })\n        .then(data => {\n          this.transactionStatus = {\n            success: true,\n            message: 'Транзакция выполнена успешно!'\n          };\n          this.$emit('transaction-added'); // Сообщаем родительскому компоненту об обновлении транзакций\n          this.fetchBalance(); // Обновляем баланс после транзакции\n        })\n        .catch(error => {\n          console.error('Ошибка при отправке транзакции:', error);\n          this.transactionStatus = {\n            success: false,\n            message: 'Ошибка при отправке транзакции. Попробуйте еще раз.'\n          };\n        });\n    }\n  }\n};\n</script>\n\n<style scoped>\n.success {\n  color: green;\n}\n\n.error {\n  color: red;\n}\n</style>\n"],"mappings":";;EAAAA,GAAA;AAAA;;EAAAA,GAAA;AAAA;;uBACEC,mBAAA,CAoCM,c,0BAnCJC,mBAAA,CAAyB,YAArB,kBAAgB,sBACpBA,mBAAA,CAuBO;IAvBAC,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAHjBC,cAAA,KAAAC,IAAA,KAG2BC,QAAA,CAAAC,eAAA,IAAAD,QAAA,CAAAC,eAAA,IAAAF,IAAA,CAAe;MACpCJ,mBAAA,CASM,c,0BARJA,mBAAA,CAAyC;IAAlCO,GAAG,EAAC;EAAU,GAAC,aAAW,sB,gBACjCP,mBAAA,CAME;IALAQ,EAAE,EAAC,UAAU;IACbC,IAAI,EAAC,MAAM;IARrB,uBAAAP,MAAA,QAAAA,MAAA,MAAAQ,MAAA,IASmBC,KAAA,CAAAC,QAAQ,GAAAF,MAAA;IACjBG,WAAW,EAAC,YAAY;IACxBC,QAAQ,EAAR;iDAFSH,KAAA,CAAAC,QAAQ,E,KAKrBZ,mBAAA,CAUM,c,0BATJA,mBAAA,CAAkC;IAA3BO,GAAG,EAAC;EAAQ,GAAC,QAAM,sB,gBAC1BP,mBAAA,CAOE;IANAQ,EAAE,EAAC,QAAQ;IACXC,IAAI,EAAC,QAAQ;IAlBvB,uBAAAP,MAAA,QAAAA,MAAA,MAAAQ,MAAA,IAmBmBC,KAAA,CAAAI,MAAM,GAAAL,MAAA;IACfG,WAAW,EAAC,OAAO;IACnBC,QAAQ,EAAR,EAAQ;IACRE,GAAG,EAAC;iDAHKL,KAAA,CAAAI,MAAM,E,+BAMnBf,mBAAA,CAAwC;IAAhCS,IAAI,EAAC;EAAQ,GAAC,WAAS,qB,4BAGtBE,KAAA,CAAAM,OAAO,a,cAAlBlB,mBAAA,CAEM,OA9BVmB,UAAA,GA6BMlB,mBAAA,CAAoC,WAAjC,cAAY,GAAAmB,gBAAA,CAAGR,KAAA,CAAAM,OAAO,IAAG,MAAI,gB,KA7BtCG,mBAAA,gBAgCeT,KAAA,CAAAU,iBAAiB,a,cAA5BtB,mBAAA,CAIM,OApCVuB,UAAA,GAiCMtB,mBAAA,CAEI;IAFAuB,KAAK,EAjCfC,eAAA,CAiCiBb,KAAA,CAAAU,iBAAiB,CAACI,OAAO;sBAC/Bd,KAAA,CAAAU,iBAAiB,CAACK,OAAO,wB,KAlCpCN,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}