{"ast":null,"code":"export default {\n  props: ['username'],\n  data() {\n    return {\n      receiver: '',\n      amount: 0,\n      balance: null,\n      // баланс пользователя\n      transactionStatus: null // состояние транзакции\n    };\n  },\n  created() {\n    if (this.username) {\n      this.fetchBalance();\n    }\n  },\n  methods: {\n    // Получаем баланс пользователя\n    fetchBalance() {\n      fetch(`http://localhost:8080/api/balance?username=${this.username}`).then(response => {\n        if (!response.ok) {\n          throw new Error('Не удалось получить баланс');\n        }\n        return response.json();\n      }).then(data => {\n        if (data && data.balance !== undefined) {\n          this.balance = data.balance;\n        } else {\n          throw new Error('Некорректные данные баланса');\n        }\n      }).catch(error => {\n        console.error('Ошибка при получении баланса:', error);\n        this.transactionStatus = {\n          success: false,\n          message: 'Ошибка при получении баланса.'\n        };\n      });\n    },\n    // Отправка транзакции\n    sendTransaction() {\n      if (!this.username) {\n        alert('Сначала войдите, указав имя пользователя!');\n        return;\n      }\n      if (this.amount <= 0) {\n        alert('Сумма должна быть больше нуля!');\n        return;\n      }\n      fetch('http://localhost:8080/api/transaction', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          sender: this.username,\n          receiver: this.receiver,\n          amount: this.amount\n        })\n      }).then(response => {\n        if (!response.ok) {\n          throw new Error('Ошибка при отправке транзакции');\n        }\n        return response.text();\n      }).then(data => {\n        this.transactionStatus = {\n          success: true,\n          message: 'Транзакция выполнена успешно!'\n        };\n        this.$emit('transaction-added'); // Сообщаем родительскому компоненту об обновлении транзакций\n        this.fetchBalance(); // Обновляем баланс после транзакции\n      }).catch(error => {\n        console.error('Ошибка при отправке транзакции:', error);\n        this.transactionStatus = {\n          success: false,\n          message: 'Ошибка при отправке транзакции. Попробуйте еще раз.'\n        };\n      });\n    }\n  }\n};","map":{"version":3,"names":["props","data","receiver","amount","balance","transactionStatus","created","username","fetchBalance","methods","fetch","then","response","ok","Error","json","undefined","catch","error","console","success","message","sendTransaction","alert","method","headers","body","JSON","stringify","sender","text","$emit"],"sources":["/Users/andrejkamanin/Documents/LedgerCore/blockchain-frontend/src/components/TransactionDeposit.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Отправка средств</h2>\n    <form @submit.prevent=\"sendTransaction\">\n      <div>\n        <label for=\"receiver\">Получатель:</label>\n        <input \n          id=\"receiver\" \n          type=\"text\" \n          v-model=\"receiver\" \n          placeholder=\"Получатель\" \n          required \n        />\n      </div>\n      <div>\n        <label for=\"amount\">Сумма:</label>\n        <input \n          id=\"amount\" \n          type=\"number\" \n          v-model=\"amount\" \n          placeholder=\"Сумма\" \n          required \n          min=\"0.01\" \n        />\n      </div>\n      <button type=\"submit\">Отправить</button>\n    </form>\n\n    <div v-if=\"balance !== null\">\n      <p>Ваш баланс: {{ balance }} USD</p>\n    </div>\n\n    <div v-if=\"transactionStatus !== null\">\n      <p :class=\"transactionStatus.success ? 'success' : 'error'\">\n        {{ transactionStatus.message }}\n      </p>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  props: ['username'],\n  data() {\n    return {\n      receiver: '',\n      amount: 0,\n      balance: null, // баланс пользователя\n      transactionStatus: null // состояние транзакции\n    };\n  },\n  created() {\n    if (this.username) {\n      this.fetchBalance();\n    }\n  },\n  methods: {\n    // Получаем баланс пользователя\n    fetchBalance() {\n      fetch(`http://localhost:8080/api/balance?username=${this.username}`)\n        .then(response => {\n          if (!response.ok) {\n            throw new Error('Не удалось получить баланс');\n          }\n          return response.json();\n        })\n        .then(data => {\n          if (data && data.balance !== undefined) {\n            this.balance = data.balance;\n          } else {\n            throw new Error('Некорректные данные баланса');\n          }\n        })\n        .catch(error => {\n          console.error('Ошибка при получении баланса:', error);\n          this.transactionStatus = {\n            success: false,\n            message: 'Ошибка при получении баланса.'\n          };\n        });\n    },\n\n    // Отправка транзакции\n    sendTransaction() {\n      if (!this.username) {\n        alert('Сначала войдите, указав имя пользователя!');\n        return;\n      }\n\n      if (this.amount <= 0) {\n        alert('Сумма должна быть больше нуля!');\n        return;\n      }\n\n      fetch('http://localhost:8080/api/transaction', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          sender: this.username,\n          receiver: this.receiver,\n          amount: this.amount\n        })\n      })\n        .then(response => {\n          if (!response.ok) {\n            throw new Error('Ошибка при отправке транзакции');\n          }\n          return response.text();\n        })\n        .then(data => {\n          this.transactionStatus = {\n            success: true,\n            message: 'Транзакция выполнена успешно!'\n          };\n          this.$emit('transaction-added'); // Сообщаем родительскому компоненту об обновлении транзакций\n          this.fetchBalance(); // Обновляем баланс после транзакции\n        })\n        .catch(error => {\n          console.error('Ошибка при отправке транзакции:', error);\n          this.transactionStatus = {\n            success: false,\n            message: 'Ошибка при отправке транзакции. Попробуйте еще раз.'\n          };\n        });\n    }\n  }\n};\n</script>\n\n<style scoped>\n.success {\n  color: green;\n}\n\n.error {\n  color: red;\n}\n</style>\n"],"mappings":"AAyCA,eAAe;EACbA,KAAK,EAAE,CAAC,UAAU,CAAC;EACnBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE;MACZC,MAAM,EAAE,CAAC;MACTC,OAAO,EAAE,IAAI;MAAE;MACfC,iBAAiB,EAAE,IAAG,CAAE;IAC1B,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,IAAI,CAACC,QAAQ,EAAE;MACjB,IAAI,CAACC,YAAY,CAAC,CAAC;IACrB;EACF,CAAC;EACDC,OAAO,EAAE;IACP;IACAD,YAAYA,CAAA,EAAG;MACbE,KAAK,CAAC,8CAA8C,IAAI,CAACH,QAAQ,EAAE,EAChEI,IAAI,CAACC,QAAO,IAAK;QAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,4BAA4B,CAAC;QAC/C;QACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;MACxB,CAAC,EACAJ,IAAI,CAACV,IAAG,IAAK;QACZ,IAAIA,IAAG,IAAKA,IAAI,CAACG,OAAM,KAAMY,SAAS,EAAE;UACtC,IAAI,CAACZ,OAAM,GAAIH,IAAI,CAACG,OAAO;QAC7B,OAAO;UACL,MAAM,IAAIU,KAAK,CAAC,6BAA6B,CAAC;QAChD;MACF,CAAC,EACAG,KAAK,CAACC,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;QACrD,IAAI,CAACb,iBAAgB,GAAI;UACvBe,OAAO,EAAE,KAAK;UACdC,OAAO,EAAE;QACX,CAAC;MACH,CAAC,CAAC;IACN,CAAC;IAED;IACAC,eAAeA,CAAA,EAAG;MAChB,IAAI,CAAC,IAAI,CAACf,QAAQ,EAAE;QAClBgB,KAAK,CAAC,2CAA2C,CAAC;QAClD;MACF;MAEA,IAAI,IAAI,CAACpB,MAAK,IAAK,CAAC,EAAE;QACpBoB,KAAK,CAAC,gCAAgC,CAAC;QACvC;MACF;MAEAb,KAAK,CAAC,uCAAuC,EAAE;QAC7Cc,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,MAAM,EAAE,IAAI,CAACtB,QAAQ;UACrBL,QAAQ,EAAE,IAAI,CAACA,QAAQ;UACvBC,MAAM,EAAE,IAAI,CAACA;QACf,CAAC;MACH,CAAC,EACEQ,IAAI,CAACC,QAAO,IAAK;QAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;QACnD;QACA,OAAOF,QAAQ,CAACkB,IAAI,CAAC,CAAC;MACxB,CAAC,EACAnB,IAAI,CAACV,IAAG,IAAK;QACZ,IAAI,CAACI,iBAAgB,GAAI;UACvBe,OAAO,EAAE,IAAI;UACbC,OAAO,EAAE;QACX,CAAC;QACD,IAAI,CAACU,KAAK,CAAC,mBAAmB,CAAC,EAAE;QACjC,IAAI,CAACvB,YAAY,CAAC,CAAC,EAAE;MACvB,CAAC,EACAS,KAAK,CAACC,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;QACvD,IAAI,CAACb,iBAAgB,GAAI;UACvBe,OAAO,EAAE,KAAK;UACdC,OAAO,EAAE;QACX,CAAC;MACH,CAAC,CAAC;IACN;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}